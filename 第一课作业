pragma solidity ^0.4.14;
 
 contract Payroll {
     
     uint constant payDuration = 10 seconds;

     address owner; 
     uint salary;
     address employee;
     uint lastPayday;
 
     function Payroll() {
         owner = msg.sender;
     }
     
     function updateEmployee(address e, uint s) {
         require(msg.sender == owner);
         
         if (employee != 0x0) {
             uint payment = salary * (now - lastPayday) / payDuration;
             employee.transfer(payment);
         }
         
         employee = e;
         salary = s * 1 ether;
         lastPayday = now;
    }
    function setEmpAddress(address a) public view returns(address)
    {   
        require (msg.sender == owner);

        employee = a;
        
        return employee;
    }
    function setgetEmpSalary(uint a) public  view returns(uint)
    {   
        require (msg.sender == owner);
        
         if (employee != 0x0) {
             uint payment = salary * (now - lastPayday) / payDuration;
             employee.transfer(payment);
         }

         salary = a * 1 ether;
         lastPayday = now;
         
         return salary;
    }

    
     function addFund() payable returns (uint) {
         return this.balance;
     }
     
     function calculateRunway() returns (uint) {
         return this.balance / salary;
     }
     
     function hasEnoughFund() returns (bool) {
         return calculateRunway() > 0;
     }
     
     function getPaid() {
         require(msg.sender == employee);
         
         uint nextPayday = lastPayday + payDuration;
         assert(nextPayday < now);
 
         lastPayday = nextPayday;
         employee.transfer(salary);
     }
 }
